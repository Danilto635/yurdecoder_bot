import os
import tempfile
import fitz  # PyMuPDF
import easyocr
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import openai
from collections import defaultdict
from docx import Document
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
reader = easyocr.Reader(['ru', 'en'])

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

photo_buffer = defaultdict(list)
photo_timers = {}

def analyze_with_gpt(text: str) -> str:
    prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–≥–æ–≤–æ—Ä. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown:
1. **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏**
2. –í—ã–¥–µ–ª—è–π **–∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –∂–∏—Ä–Ω—ã–º**
3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏:
   - üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
   - ‚ö†Ô∏è –†–∏—Å–∫–∏
   - üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º

–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:
{text}
"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ Markdown, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å —ç–º–æ–¥–∑–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=1500
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:\n{e}"

@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Æ—ÄDecoder ü§ñ\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–æ–≥–æ–≤–æ—Ä (PDF, DOCX, —Ñ–æ—Ç–æ), –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å.",
        reply_markup=main_menu
    )

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
async def handle_analysis_button(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å PDF, Word –∏–ª–∏ —Ñ–æ—Ç–æ üìÑüì∑")

@dp.message_handler(lambda msg: msg.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def handle_about(message: Message):
    await message.answer("–Ø —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –±–æ—Ç –Æ—ÄDecoder. GPT-4o –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–≥–æ–≤–æ—Ä—ã –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —Ä–∏—Å–∫–∏.")

@dp.message_handler(lambda msg: msg.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    await message.answer("–°–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @–¢–í–û–ô_–¢–ï–õ–ï–ì–†–ê–ú")

@dp.message_handler(content_types=ContentType.DOCUMENT)
async def handle_document(message: Message):
    document = message.document
    file_name = document.file_name.lower()
    if not (file_name.endswith('.pdf') or file_name.endswith('.docx')):
        await message.answer("–ü—Ä–∏—à–ª–∏ PDF, DOCX –∏–ª–∏ —Ñ–æ—Ç–æ.")
        return

    file = await document.download(destination_dir=tempfile.gettempdir())
    path = file.name
    text = ""

    if file_name.endswith('.pdf'):
        await message.answer("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF...")
        try:
            doc = fitz.open(path)
            text = "".join([page.get_text() for page in doc])
            doc.close()
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ PDF:\n{e}")
            return

    elif file_name.endswith('.docx'):
        await message.answer("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ Word...")
        try:
            doc = Document(path)
            text = "\n".join([p.text for p in doc.paragraphs])
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ DOCX:\n{e}")
            return

    if text.strip():
        await message.answer("ü§ñ GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–≥–æ–≤–æ—Ä...")
        result = analyze_with_gpt(text)
        await message.answer(result[:4000], parse_mode="Markdown")
    else:
        await message.answer("üòï –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á—ë–Ω.")

async def process_photo_buffer(chat_id):
    await asyncio.sleep(7)
    images = photo_buffer.pop(chat_id, [])
    if not images:
        return

    await bot.send_message(chat_id, "üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
    all_text = []
    for path in images:
        result = reader.readtext(path, detail=0, paragraph=True)
        all_text.append("\n".join(result))

    combined_text = "\n".join(all_text)

    if combined_text.strip():
        await bot.send_message(chat_id, "ü§ñ GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–≥–æ–≤–æ—Ä...")
        result = analyze_with_gpt(combined_text)
        await bot.send_message(chat_id, result[:4000], parse_mode="Markdown")
    else:
        await bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")

@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: Message):
    chat_id = message.chat.id
    photo = message.photo[-1]
    file = await photo.download(destination_dir=tempfile.gettempdir())
    path = file.name
    photo_buffer[chat_id].append(path)

    if chat_id in photo_timers:
        photo_timers[chat_id].cancel()
    photo_timers[chat_id] = asyncio.create_task(process_photo_buffer(chat_id))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    executor.start_polling(dp, skip_updates=True)
