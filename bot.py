import os
import tempfile
import asyncio
import fitz  # PyMuPDF
import easyocr
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
from collections import defaultdict
from docx import Document

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# --- –£–∫–∞–∂–∏ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è ---
proxies = {
    "http": os.getenv("HTTP_PROXY"),
    "https": os.getenv("HTTPS_PROXY")
}

# Telegram-–±–æ—Ç
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
reader = easyocr.Reader(['ru', 'en'])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

photo_buffer = defaultdict(list)
photo_timers = {}

# --- –ó–∞–ø—Ä–æ—Å –∫ GPT —á–µ—Ä–µ–∑ requests ---
def analyze_with_gpt(text: str) -> str:
    prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–≥–æ–≤–æ—Ä. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown:
1. **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏** (#) ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∏ —Ü–∏—Ñ—Ä—ã (1., 2.)
2. –í—ã–¥–µ–ª—è–π **–∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –∂–∏—Ä–Ω—ã–º**
3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏:
   - üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
   - ‚ö†Ô∏è –†–∏—Å–∫–∏
   - üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞

–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:
{text}
"""

    try:
        url = "https://api.openai.com/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {OPENAI_API_KEY}"
        }
        data = {
            "model": "gpt-4",
            "messages": [
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ Markdown ‚Äî –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.4,
            "max_tokens": 1500
        }

        response = requests.post(url, headers=headers, json=data, proxies=proxies, timeout=60)
        response.raise_for_status()
        result = response.json()
        return result["choices"][0]["message"]["content"]

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:\n{e}"


@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Æ—ÄDecoder ü§ñ\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –Ω–∞–π—Ç–∏ —Ä–∏—Å–∫–∏.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=main_menu
    )

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
async def handle_analysis_button(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–æ–≥–æ–≤–æ—Ä: PDF, DOCX –∏–ª–∏ —Ñ–æ—Ç–æ üìÑüì∑")

@dp.message_handler(lambda msg: msg.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def handle_about(message: Message):
    await message.answer("–Æ—ÄDecoder ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã —Å –ø–æ–º–æ—â—å—é GPT-4. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç PDF, Word –∏ —Ñ–æ—Ç–æ.")

@dp.message_handler(lambda msg: msg.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    await message.answer("–û–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @–¢–í–û–ô_–¢–ï–õ–ï–ì–†–ê–ú")

@dp.message_handler(content_types=ContentType.DOCUMENT)
async def handle_document(message: Message):
    document = message.document
    file_name = document.file_name.lower()
    if not (file_name.endswith('.pdf') or file_name.endswith('.docx')):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ PDF, DOCX –∏–ª–∏ —Ñ–æ—Ç–æ.")
        return
    file = await document.download(destination_dir=tempfile.gettempdir())
    path = file.name
    text = ""
    if file_name.endswith('.pdf'):
        await message.answer("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF...")
        try:
            doc = fitz.open(path)
            text = "".join([page.get_text() for page in doc])
            doc.close()
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF:\n{e}")
            return
    elif file_name.endswith('.docx'):
        await message.answer("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ Word...")
        try:
            doc = Document(path)
            text = "\n".join([para.text for para in doc.paragraphs])
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Word:\n{e}")
            return
    if text.strip():
        await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â—å—é AI...")
        result = analyze_with_gpt(text)
        await message.answer(result[:4000], parse_mode="Markdown")
    else:
        await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç.")

async def process_photo_buffer(chat_id):
    await asyncio.sleep(7)
    images = photo_buffer.pop(chat_id, [])
    if not images:
        return
    await bot.send_message(chat_id, "üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ—Ö —Ñ–æ—Ç–æ...")
    all_text = []
    for path in images:
        result = reader.readtext(path, detail=0, paragraph=True)
        all_text.append("\n".join(result))
    combined_text = "\n".join(all_text)
    if combined_text.strip():
        await bot.send_message(chat_id, "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â—å—é AI...")
        result = analyze_with_gpt(combined_text)
        await bot.send_message(chat_id, result[:4000], parse_mode="Markdown")
    else:
        await bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ.")

@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: Message):
    chat_id = message.chat.id
    photo = message.photo[-1]
    file = await photo.download(destination_dir=tempfile.gettempdir())
    path = file.name
    photo_buffer[chat_id].append(path)
    if chat_id in photo_timers:
        photo_timers[chat_id].cancel()
    photo_timers[chat_id] = asyncio.create_task(process_photo_buffer(chat_id))

@dp.message_handler(content_types=ContentType.TEXT)
async def handle_text_contract(message: Message):
    text = message.text.strip()
    if len(text) < 100:
        await message.answer("‚ùóÔ∏è–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä —Ü–µ–ª–∏–∫–æ–º.")
        return
    if len(text) > 12000:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞—é –¥–æ –ø–µ—Ä–≤—ã—Ö 12000 —Å–∏–º–≤–æ–ª–æ–≤.")
        text = text[:12000]
    await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â—å—é AI...")
    result = analyze_with_gpt(text)
    await message.answer(result[:4000], parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    async def on_startup(dp):
    await bot.delete_webhook(drop_pending_updates=True)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

